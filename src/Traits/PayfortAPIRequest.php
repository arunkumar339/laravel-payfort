<?php

namespace LaravelPayfort\Traits;

use LaravelPayfort\Exceptions\PayfortException;
use LaravelPayfort\Exceptions\PayfortRequestException;


trait PayfortAPIRequest
{
    /**
     * Make Payfort create mobile sdk token request & return response.
     *
     * @see https://docs.payfort.com/docs/mobile-sdk/build/index.html#create-sdk-token
     *
     * @param string $deviceId The device id generated by payfort SDK to create SDK token to be used on it.
     * @return string Payfort sdk token
     *
     * @throws \LaravelPayfort\Exceptions\PayfortRequestException
     */
    public function createMobileSDKToken($deviceId)
    {
        $params = [
            'service_command' => 'SDK_TOKEN',
            'access_code' => $this->config['access_code'],
            'merchant_identifier' => $this->config['merchant_identifier'],
            'language' => $this->config['language'],
            'device_id' => $deviceId
        ];

        $response = $this->callPayfortAPI($params);

        /*
         * According to payfort documentation
         * 22 refers to SDK Token creation success.
         * @see https://docs.payfort.com/docs/in-common/build/index.html#statuses
         */
        if ($response->status != '22') {
            throw new PayfortRequestException($response->response_message);
        }

        /*
         * According to payfort documentation
         * 22  refers to SDK Token creation success.
         * 000 refers to success message
         * @see https://docs.payfort.com/docs/in-common/build/index.html#messages
         */
        if ($response->response_code != '22000') {
            throw new PayfortRequestException($response->response_message);
        }

        # return SDK token only
        return $response->sdk_token;
    }

    /**
     * Make Payfort check status request & return response.
     *
     * @see https://docs.payfort.com/docs/in-common/build/index.html#check-status
     *
     * @param int $fortId The Payfort reference to check for its transactions status
     * @return \stdClass
     *
     * @throws \LaravelPayfort\Exceptions\PayfortRequestException
     */
    public function checkOrderStatusByFortId($fortId)
    {
        $response = $this->checkOrderStatus([
            'fort_id' => $fortId
        ]);

        return $response;
    }

    /**
     * Make Payfort check status request & return response.
     *
     * @see https://docs.payfort.com/docs/in-common/build/index.html#check-status
     *
     * @param string $merchant_reference The Merchant reference to check for its transactions status
     * @return \stdClass
     *
     * @throws \LaravelPayfort\Exceptions\PayfortRequestException
     */
    public function checkOrderStatusByMerchantReference($merchant_reference)
    {
        return $this->checkOrderStatus([
            'merchant_reference' => $merchant_reference
        ]);
    }

    /**
     * Process api payment request using token.
     *
     * @see https://docs.payfort.com/docs/api/build/index.html#recurring-transactions
     *
     * @param array $data The request parameters for processing payment request
     * @return \stdClass
     *
     * @throws \LaravelPayfort\Exceptions\PayfortRequestException
     */
    public function processPaymentThroughAPI($data)
    {
        # Prepare api request parameters
        $requestParams = [
            'command' => data_get($data, 'command', 'PURCHASE'),
            'access_code' => $this->config['access_code'],
            'merchant_identifier' => $this->config['merchant_identifier'],
            'merchant_reference' => $data['merchant_reference'],
            'amount' => $this->getPayfortAmount($data['amount'], $data['currency']),
            'currency' => data_get($data, 'currency', $this->config['currency']),
            'language' => $this->config['language'],
            'customer_email' => $data['customer_email'],
            'eci' => 'RECURRING',
            'token_name' => $data['token_name'],

        ];

        # Redirection page request optional parameters
        $requestOptionalParameters = [
            'payment_option',
            'order_description',
            'customer_name',
            'merchant_extra',
            'merchant_extra1',
            'merchant_extra2',
            'merchant_extra3',
            'phone_number',
            'settlement_reference'
        ];

        # Check for request optional parameters in passed params
        foreach ($requestOptionalParameters as $optionalParameter) {
              if (array_key_exists($optionalParameter, $data)) {
                  $requestParams[$optionalParameter] = $data[$optionalParameter];
              }
        }
        $response = $this->callPayfortAPI($requestParams);

      /*
       * According to payfort documentation
       * 14 refers to Purchase Success.
       * @see https://docs.payfort.com/docs/in-common/build/index.html#statuses
       */
        if ($response->status != '14') {
          throw new PayfortRequestException($response->response_message);
        }

      /*
      * According to payfort documentation
      * 14  refers to Check Status success.
      * 000 refers to success message
      * @see https://docs.payfort.com/docs/in-common/build/index.html#statuses
      */
        if ($response->response_code != '14000') {
          throw new PayfortRequestException($response->response_message);
        }


    }


    /**
     * Make Payfort check status request & return response.
     *
     * @see https://docs.payfort.com/docs/in-common/build/index.html#check-status
     *
     * @param array $data The request parameters for check status request
     * @return \stdClass
     *
     * @throws \LaravelPayfort\Exceptions\PayfortRequestException
     */
    private function checkOrderStatus($data)
    {
        $data = array_merge($data, [
            'query_command' => 'CHECK_STATUS',
            'access_code' => $this->config['access_code'],
            'merchant_identifier' => $this->config['merchant_identifier'],
            'language' => $this->config['language']
        ]);

        $response = $this->callPayfortAPI($data);

        /*
         * According to payfort documentation
         * 12 refers to Check Status success.
         * @see https://docs.payfort.com/docs/in-common/build/index.html#statuses
         */
        if ($response->status != '12') {
            throw new PayfortRequestException($response->response_message);
        }

        /*
        * According to payfort documentation
        * 12  refers to Check Status success.
        * 000 refers to success message
        * @see https://docs.payfort.com/docs/in-common/build/index.html#statuses
        */
        if ($response->response_code != '12000') {
            throw new PayfortRequestException($response->response_message);
        }
    }


    /**
     * Make Payfort Http request & return response.
     *
     * @param array $data Request parameters
     * @return \stdClass
     *
     * @throws \LaravelPayfort\Exceptions\PayfortException
     */
    private function callPayfortAPI($data)
    {
        # Add payfort request signature to request data
        $data['signature'] = $this->calcPayfortSignature($data, 'request');

        try {
            # Make http request
            $rawResponse = $this->httpClient->post($this->payfortEndpoint, [
                'json' => $data
            ])->getBody();

            $response = json_decode($rawResponse);

            if (data_get($response, 'status') == '00') {
                throw new PayfortException(data_get($response, 'response_message'));
            }

            # Verify response signature
            if (data_get($response, 'signature') != $this->calcPayfortSignature(((array)$response), 'response')) {
                throw new PayfortException('Payfort response signature mismatched');
            }

            return $response;

        } catch (\Exception $e) {
            throw new PayfortException($e);
        }
    }
}
